{"version":3,"sources":["api/index.js","components/Feature.js","components/Loading.js","components/Preview.js","components/Search.js","components/Title.js","index.js"],"names":["BASE_URL","KEY","fetchQueryResultsFromTermAndValue","term","value","a","fetch","encodeURI","split","join","response","json","data","fetchQueryResultsFromURL","url","fetchQueryResults","century","classification","queryString","fetchAllCenturies","localStorage","getItem","JSON","parse","records","setItem","stringify","fetchAllClassifications","Searchable","props","searchTerm","searchValue","setIsLoading","setSearchResults","className","href","onClick","event","preventDefault","result","console","error","Feature","featuredResult","title","dated","images","primaryimageurl","description","culture","style","technique","medium","dimensions","people","department","division","contact","creditline","log","id","map","person","index","key","displayname","image","src","Loading","Preview","setFeaturedResult","searchResults","info","fetchPage","pageUrl","results","disabled","prev","next","record","alt","Search","useState","centuryList","setCenturyList","classificationList","setClassificationList","setQueryString","setCentury","setClassification","useEffect","Promise","all","then","centuries","classifications","catch","onSubmit","err","htmlFor","type","placeholder","onChange","target","length","name","Title","App","isLoading","ReactDOM","render","document","getElementById"],"mappings":"oMAKaA,EAAW,oCACXC,EAAM,8CAKZ,SAAeC,EAAtB,oC,4CAAO,WAAiDC,EAAMC,GAAvD,iBAAAC,EAAA,+EAEoBC,MAAM,GAAD,OAAKN,EAAL,mBAA0BC,EAA1B,YAAmCE,EAAnC,YAA6CI,UAAUH,EAAMI,MAAM,KAAKC,KAAK,QAFtG,cAEGC,EAFH,gBAGgBA,EAASC,OAHzB,cAGGC,EAHH,yBAKIA,GALJ,wG,sBAcA,SAAeC,EAAtB,kC,4CAAO,WAAwCC,GAAxC,iBAAAT,EAAA,+EAEoBC,MAAMQ,GAF1B,cAEGJ,EAFH,gBAGgBA,EAASC,OAHzB,cAGGC,EAHH,yBAKIA,GALJ,wG,sBAgBA,SAAeG,EAAtB,kC,4CAAO,uCAAAV,EAAA,6DACLW,EADK,EACLA,QACAC,EAFK,EAELA,eACAC,EAHK,EAGLA,YAEMJ,EALD,UAKWd,EALX,mBAKgCC,EALhC,2BAKwDgB,EALxD,oBAMHD,EANG,oBAMkBE,GANlB,kBASoBZ,MAAMQ,GAT1B,cASGJ,EATH,gBAUgBA,EAASC,OAVzB,cAUGC,EAVH,yBAYIA,GAZJ,wG,sBAqBA,SAAeO,IAAtB,+B,4CAAO,kCAAAd,EAAA,0DACDe,aAAaC,QAAQ,aADpB,yCAEIC,KAAKC,MAAMH,aAAaC,QAAQ,eAFpC,cAKCP,EALD,UAKWd,EALX,oBAKiCC,EALjC,kDAQoBK,MAAMQ,GAR1B,cAQGJ,EARH,gBASgBA,EAASC,OATzB,cASGC,EATH,OAUGY,EAAUZ,EAAKY,QAErBJ,aAAaK,QAAQ,YAAaH,KAAKI,UAAUF,IAZ9C,kBAcIA,GAdJ,wG,sBAuBA,SAAeG,IAAtB,+B,4CAAO,kCAAAtB,EAAA,0DACDe,aAAaC,QAAQ,mBADpB,yCAEIC,KAAKC,MAAMH,aAAaC,QAAQ,qBAFpC,cAKCP,EALD,UAKWd,EALX,2BAKwCC,EALxC,yCAQoBK,MAAMQ,GAR1B,cAQGJ,EARH,gBASgBA,EAASC,OATzB,cASGC,EATH,OAUGY,EAAUZ,EAAKY,QAErBJ,aAAaK,QAAQ,kBAAmBH,KAAKI,UAAUF,IAZpD,kBAcIA,GAdJ,wG,sBCtDP,IAAMI,EAAa,SAACC,GAAW,IACrBC,EAA4DD,EAA5DC,WAAYC,EAAgDF,EAAhDE,YAAaC,EAAmCH,EAAnCG,aAAcC,EAAqBJ,EAArBI,iBAC/C,OACE,0BAAMC,UAAU,WAChB,uBAAGC,KAAK,IAAIC,QAAO,uCAAE,WAAOC,GAAP,eAAAhC,EAAA,6DACjBgC,EAAMC,iBACNN,GAAa,GAFI,kBAII9B,EAAkC4B,EAAYC,GAJlD,OAIXQ,EAJW,OAKjBN,EAAiBM,GALA,gDAOjBC,QAAQC,MAAR,MAPiB,yBASjBT,GAAa,GATI,4EAAF,uDAWfD,KA2HOW,EAnFC,SAACb,GAAW,IAClBG,EAAmCH,EAAnCG,aAAcC,EAAqBJ,EAArBI,iBADG,EAEwIJ,EAAMc,eAA/JC,EAFiB,EAEjBA,MAAOC,EAFU,EAEVA,MAAOC,EAFG,EAEHA,OAAQC,EAFL,EAEKA,gBAAiBC,EAFtB,EAEsBA,YAAaC,EAFnC,EAEmCA,QAASC,EAF5C,EAE4CA,MAAOC,EAFnD,EAEmDA,UAAWC,EAF9D,EAE8DA,OAAQC,EAFtE,EAEsEA,WAAYC,EAFlF,EAEkFA,OAAQC,EAF1F,EAE0FA,WAAYC,EAFtG,EAEsGA,SAAUC,EAFhH,EAEgHA,QAASC,EAFzH,EAEyHA,WAElJ,OADAlB,QAAQmB,IAAI9B,GACLA,EAAMc,eACX,0BAAMiB,GAAG,WACP,yBAAK1B,UAAU,kBACb,gCACE,4BAAKU,GACL,4BAAKC,IAEP,6BAASX,UAAU,SAKjB,kBAAC,WAAD,KACE,0BAAMA,UAAU,SAASU,EAAQ,QAAU,IAC3C,0BAAMV,UAAU,WAAWU,GAAgB,KAE7C,kBAAC,WAAD,KACE,0BAAMV,UAAU,SAASc,EAAc,cAAgB,IACvD,0BAAMd,UAAU,WAAWc,GAA4B,KAEzD,kBAAC,WAAD,KACE,0BAAMd,UAAU,SAASe,EAAU,UAAY,IAC/C,kBAAC,EAAD,CAAYhB,iBAAkBA,EAAkBD,aAAcA,EAAcD,YAAakB,EAASnB,WAAW,aAE/G,kBAAC,WAAD,KACE,0BAAMI,UAAU,SAASgB,EAAQ,QAAU,IAC3C,0BAAMhB,UAAU,WAAWgB,GAAgB,KAE7C,kBAAC,WAAD,KACE,0BAAMhB,UAAU,SAASiB,EAAY,YAAc,IACnD,kBAAC,EAAD,CAAYlB,iBAAkBA,EAAkBD,aAAcA,EAAcD,YAAaoB,EAAWrB,WAAW,eAEjH,kBAAC,WAAD,KACE,0BAAMI,UAAU,SAASkB,EAAS,SAAW,IAC7C,kBAAC,EAAD,CAAYnB,iBAAkBA,EAAkBD,aAAcA,EAAcD,YAAaqB,EAAQtB,WAAW,YAE9G,kBAAC,WAAD,KACE,0BAAMI,UAAU,SAASmB,EAAa,aAAe,IACrD,0BAAMnB,UAAU,WAAWmB,GAA0B,KAEvD,kBAAC,WAAD,KACGC,EAASA,EAAOO,KAAI,SAACC,EAAQC,GAC5B,OACE,kBAAC,WAAD,CAAUC,IAAKD,GACb,0BAAM7B,UAAU,SAASoB,EAAS,SAAW,IAC7C,kBAAC,EAAD,CAAYrB,iBAAkBA,EAAkBF,YAAa+B,EAAOG,YAAanC,WAAW,SAASE,aAAcA,QAGrH,MAEN,kBAAC,WAAD,KACE,0BAAME,UAAU,SAASqB,EAAa,aAAe,IACrD,0BAAMrB,UAAU,WAAWqB,GAA0B,KAEvD,kBAAC,WAAD,KACE,0BAAMrB,UAAU,SAASsB,EAAW,WAAa,IACjD,0BAAMtB,UAAU,WAAWsB,GAAsB,KAEnD,kBAAC,WAAD,KACE,0BAAMtB,UAAU,SAASuB,EAAU,UAAY,IAC/C,0BAAMvB,UAAU,WAAWuB,GAAoB,KAEjD,kBAAC,WAAD,KACE,0BAAMvB,UAAU,SAASwB,EAAa,cAAgB,IACtD,0BAAMxB,UAAU,WAAWwB,GAA0B,MAGzD,6BAASxB,UAAU,UAEhBY,EAASA,EAAOe,KAAI,SAACK,EAAOH,GAAR,OACnB,yBAAKC,IAAKD,EAAOI,IAAKpB,OAAuB,QAInD,0BAAMa,GAAG,aClJAQ,EARC,WACd,OACE,yBAAKR,GAAG,WACN,wBAAI1B,UAAU,WAAd,kBCgFSmC,EArFC,SAACxC,GAAU,IAOjBI,EAAsDJ,EAAtDI,iBAAkBqC,EAAoCzC,EAApCyC,kBAAmBtC,EAAiBH,EAAjBG,aAPpB,EAQCH,EAAM0C,cAAxBC,EARiB,EAQjBA,KAAMhD,EARW,EAQXA,QARW,SAcViD,EAdU,8EAczB,WAAyBC,GAAzB,eAAArE,EAAA,6DACE2B,GAAa,GADf,kBAI0BnB,EAAyB6D,GAJnD,OAIUC,EAJV,OAKI1C,EAAiB0C,GALrB,gDAOInC,QAAQC,MAAR,MAPJ,yBASIT,GAAa,GATjB,6EAdyB,sBA2BzB,OAAO,2BAAO4B,GAAG,WACf,4BAAQ1B,UAAU,cAEhB,4BACE0C,UAAWJ,EAAKK,KAChB3C,UAAU,WACVE,QAAS,WACPqC,EAAUD,EAAKK,QAJnB,YAOA,4BACED,UAAWJ,EAAKM,KAChB5C,UAAU,OACVE,QAAS,WACPqC,EAAUD,EAAKM,QAJnB,SAOF,6BAAS5C,UAAU,WAkBfV,EAAQqC,KAAI,SAACkB,EAAQhB,GACnB,OACE,yBACEC,IAAKD,EACL7B,UAAU,iBACVE,QAAS,SAACC,GACRA,EAAMC,iBACNgC,EAAkBS,KAGlBA,EAAOhC,gBAAkB,yBAAKoB,IAAKY,EAAOhC,gBAAiBiC,IAAKD,EAAO/B,cAAkB,KAGzF+B,EAAOnC,MAAQ,4BAAKmC,EAAOnC,OAAc,mDC2C1CqC,EAnHA,SAACpD,GAAU,IAGhBG,EAAmCH,EAAnCG,aAAcC,EAAqBJ,EAArBI,iBAHE,EAiBciD,mBAAS,IAjBvB,mBAiBjBC,EAjBiB,KAiBJC,EAjBI,OAkB4BF,mBAAS,IAlBrC,mBAkBjBG,EAlBiB,KAkBGC,EAlBH,OAmBcJ,mBAAS,IAnBvB,mBAmBjBhE,EAnBiB,KAmBJqE,EAnBI,OAoBML,mBAAS,OApBf,mBAoBjBlE,EApBiB,KAoBRwE,EApBQ,OAqBoBN,mBAAS,OArB7B,mBAqBjBjE,EArBiB,KAqBDwE,EArBC,KA0DxB,OA5BAC,qBAAU,WAENC,QAAQC,IAAI,CAACzE,IAAqBQ,MAC/BkE,MAAK,YAAmC,IAAD,mBAAhCC,EAAgC,KAArBC,EAAqB,KACtCX,EAAeU,GACfR,EAAsBS,MAEvBC,OAAM,SAACvD,GACND,QAAQC,MAAMA,QAEnB,IAkBI,0BAAMmB,GAAG,SAASqC,SAAQ,uCAAE,WAAO5D,GAAP,SAAAhC,EAAA,sDACjCgC,EAAMC,iBACNN,GAAa,GACb,IACEjB,EAAkB,CAAEC,UAASC,iBAAgBC,gBAC1C2E,MAAK,SAAClB,GACL1C,EAAiB0C,MAErB,MAAOuB,GACP1D,QAAQC,MAAMyD,GANhB,QAQElE,GAAa,GAXkB,2CAAF,uDAc/B,kCACE,2BAAOmE,QAAQ,YAAf,SACA,2BACEvC,GAAG,WACHwC,KAAK,OACLC,YAAY,oBACZjG,MAAOc,EACPoF,SAAU,SAACjE,GAAYkD,EAAelD,EAAMkE,OAAOnG,WAEvD,kCACE,2BAAO+F,QAAQ,yBAAf,kBAAsD,0BAAMjE,UAAU,wBAAhB,IAA0CmD,EAAmBmB,OAA7D,MACtD,4BACEC,KAAK,iBACL7C,GAAG,wBACHxD,MAAOa,EACPqF,SAAU,SAACjE,GAAYoD,EAAkBpD,EAAMkE,OAAOnG,SACtD,4BAAQA,MAAM,OAAd,OAEEiF,EAAmBxB,KAAI,SAAC5C,EAAgB8C,GACtC,OAAO,4BAAQC,IAAKD,GAAQ9C,EAAewF,WAKnD,kCACE,2BAAON,QAAQ,kBAAf,WAAwC,0BAAMjE,UAAU,iBAAhB,IAAmCiD,EAAYqB,OAA/C,MACxC,4BACEC,KAAK,UACL7C,GAAG,iBACHxD,MAAOY,EACPsF,SAAU,SAACjE,GAAYmD,EAAWnD,EAAMkE,OAAOnG,SAC/C,4BAAQA,MAAM,OAAd,OAEE+E,EAAYtB,KAAI,SAAC7C,EAAS+C,GACxB,OAAO,4BAAQC,IAAKD,GAAQ/C,EAAQyF,WAK5C,4CC9FWC,EAbD,WACZ,OACE,yBAAK9C,GAAG,SACN,iDAGA,qFCTA+C,EAAM,WAAM,MAS4BzB,mBAAS,CAAEV,KAAM,GAAIhD,QAAS,KAT1D,mBASR+C,EATQ,KASOtC,EATP,OAU8BiD,mBAAS,CAAC,OAVxC,mBAURvC,EAVQ,KAUQ2B,EAVR,OAWkBY,oBAAS,GAX3B,mBAWT0B,EAXS,KAWE5E,EAXF,KAYhB,OAAO,yBAAKE,UAAU,OAEpB,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAAQF,aAAcA,EAAcC,iBAAkBA,IAEtD,kBAAC,EAAD,CAASsC,cAAeA,EAAevC,aAAcA,EAAcC,iBAAkBA,EAAkBqC,kBAAmBA,IAE1H,kBAAC,EAAD,CAAS3B,eAAgBA,EAAgBX,aAAcA,EAAcC,iBAAkBA,IAGrF2E,EAAY,kBAAC,EAAD,MAAa,KAXtB,MAqBTC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,S","file":"static/js/main.8ed5741e.chunk.js","sourcesContent":["/**\r\n * This file features and exports all of your calls to the API\r\n * \r\n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\r\n */\r\nexport const BASE_URL = 'https://api.harvardartmuseums.org';\r\nexport const KEY = 'apikey=f7780911-f7c9-4076-af2a-a4a6a8c78ca1';\r\n\r\n/**\r\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\r\n */\r\nexport async function fetchQueryResultsFromTermAndValue(term, value) {\r\n  try {\r\n    const response = await fetch(`${ BASE_URL }/object?${ KEY }&${ term }=${ encodeURI(value.split('-').join('|')) }`);\r\n    const data = await response.json();\r\n\r\n    return data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\r\n */\r\nexport async function fetchQueryResultsFromURL(url) {\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n\r\n    return data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\r\n * \r\n * Then makes a call to the API, and returns the first page of results\r\n */\r\nexport async function fetchQueryResults({\r\n  century,\r\n  classification,\r\n  queryString,\r\n}) {\r\n  const url = `${ BASE_URL }/object?${ KEY }&classification=${ classification }&century=${ \r\n    century }&keyword=${ queryString }`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n\r\n    return data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\r\n */\r\nexport async function fetchAllCenturies() {\r\n  if (localStorage.getItem('centuries')) {\r\n    return JSON.parse(localStorage.getItem('centuries'));\r\n  }\r\n\r\n  const url = `${ BASE_URL }/century?${ KEY }&size=100&sort=temporalorder`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    const records = data.records;\r\n\r\n    localStorage.setItem('centuries', JSON.stringify(records));\r\n\r\n    return records;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \r\n */\r\nexport async function fetchAllClassifications() {\r\n  if (localStorage.getItem('classifications')) {\r\n    return JSON.parse(localStorage.getItem('classifications'));\r\n  }\r\n\r\n  const url = `${ BASE_URL }/classification?${ KEY }&size=100&sort=name`;\r\n\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    const records = data.records;\r\n\r\n    localStorage.setItem('classifications', JSON.stringify(records));\r\n\r\n    return records;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n}","import React, { Fragment } from 'react';\r\n\r\n// Don't touch this import\r\nimport { fetchQueryResultsFromTermAndValue } from '../api';\r\n\r\n/**\r\n * We need a new component called Searchable which:\r\n * \r\n * Has a template like this:\r\n * \r\n * <span className=\"content\">\r\n *  <a href=\"#\" onClick={async (event) => {}}>SOME SEARCH TERM</a>\r\n * </span>\r\n *\r\n * You'll need to read searchTerm, searchValue, setIsLoading, and setSearchResults off of the props.\r\n * \r\n * When someone clicks the anchor tag, you should:\r\n * \r\n * - preventDefault on the event\r\n * - call setIsLoading, set it to true\r\n * \r\n * Then start a try/catch/finally block:\r\n * \r\n * try:\r\n *  - await the result of fetchQueryResultsFromTermAndValue, passing in searchTerm and searchValue\r\n *  - send the result to setSearchResults (which will update the Preview component)\r\n * catch: \r\n *  - console.error the error\r\n * finally:\r\n *  - call setIsLoading, set it to false\r\n */\r\nconst Searchable = (props) => {\r\n  const { searchTerm, searchValue, setIsLoading, setSearchResults } = props;\r\n  return (\r\n    <span className=\"content\">\r\n    <a href=\"#\" onClick={async (event) => {\r\n        event.preventDefault();\r\n        setIsLoading(true);\r\n      try {\r\n        const result = await fetchQueryResultsFromTermAndValue(searchTerm, searchValue);\r\n        setSearchResults(result);\r\n      } catch (error) {\r\n        console.error(error)\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    }}>{searchValue}</a>\r\n    </span>\r\n  )\r\n\r\n}\r\n\r\n/**\r\n * We need a new component called Feature which looks like this when no featuredResult is passed in as a prop:\r\n * \r\n * <main id=\"feature\"></main>\r\n * \r\n * And like this when one is:\r\n * \r\n * <main id=\"feature\">\r\n *   <div className=\"object-feature\">\r\n *     <header>\r\n *       <h3>OBJECT TITLE</h3>\r\n *       <h4>WHEN IT IS DATED</h4>\r\n *     </header>\r\n *     <section className=\"facts\">\r\n *       <span className=\"title\">FACT NAME</span>\r\n *       <span className=\"content\">FACT VALUE</span>\r\n *       <span className=\"title\">NEXT FACT NAME</span>\r\n *       <span className=\"content\">NEXT FACT VALUE</span>\r\n *     </section>\r\n *     <section className=\"photos\">\r\n *       <img src=IMAGE_URL alt=SOMETHING_WORTHWHILE />\r\n *     </section>\r\n *   </div>\r\n * </main>\r\n * \r\n * The different facts look like this: title, dated, images, primaryimageurl, description, culture, style, \r\n * technique, medium, dimensions, people, department, division, contact, creditline\r\n * \r\n * The <Searchable /> ones are: culture, technique, medium (first toLowerCase it), and person.displayname (one for each PEOPLE)\r\n * \r\n * NOTE: people and images are likely to be arrays, and will need to be mapped over if they exist\r\n * \r\n * This component should be exported as default.\r\n */\r\nconst Feature = (props) => {\r\n  const { setIsLoading, setSearchResults } = props;\r\n  const { title, dated, images, primaryimageurl, description, culture, style, technique, medium, dimensions, people, department, division, contact, creditline } = props.featuredResult;\r\n  console.log(props);\r\n  return props.featuredResult ? (\r\n    <main id=\"feature\">\r\n      <div className=\"object-feature\">\r\n        <header>\r\n          <h3>{title}</h3>\r\n          <h4>{dated}</h4>\r\n        </header>\r\n        <section className=\"facts\">\r\n          {/* <span className=\"title\">FACT NAME</span>\r\n          <span className=\"content\">FACT VALUE</span>\r\n          <span className=\"title\">NEXT FACT NAME</span>\r\n          <span className=\"content\">NEXT FACT VALUE</span> */}\r\n          <Fragment>\r\n            <span className=\"title\">{title ? 'Title' : ''}</span>\r\n            <span className=\"content\">{title ? title : ''}</span>\r\n          </Fragment>\r\n          <Fragment>\r\n            <span className=\"title\">{description ? 'Description' : ''}</span>\r\n            <span className=\"content\">{description ? description : ''}</span>\r\n          </Fragment>\r\n          <Fragment>\r\n            <span className=\"title\">{culture ? \"Culture\" : ''}</span>\r\n            <Searchable setSearchResults={setSearchResults} setIsLoading={setIsLoading} searchValue={culture} searchTerm=\"culture\"/>\r\n          </Fragment>\r\n          <Fragment>\r\n            <span className=\"title\">{style ? \"Style\" : ''}</span>\r\n            <span className=\"content\">{style ? style : ''}</span>\r\n          </Fragment>\r\n          <Fragment>\r\n            <span className=\"title\">{technique ? \"Technique\" : ''}</span>\r\n            <Searchable setSearchResults={setSearchResults} setIsLoading={setIsLoading} searchValue={technique} searchTerm=\"technique\"/>\r\n          </Fragment>\r\n          <Fragment>\r\n            <span className=\"title\">{medium ? \"Medium\" : ''}</span>\r\n            <Searchable setSearchResults={setSearchResults} setIsLoading={setIsLoading} searchValue={medium} searchTerm=\"medium\" />\r\n          </Fragment>\r\n          <Fragment>\r\n            <span className=\"title\">{dimensions ? \"Dimensions\" : ''}</span>\r\n            <span className=\"content\">{dimensions ? dimensions : ''}</span>\r\n          </Fragment>\r\n          <Fragment>\r\n            {people ? people.map((person, index) => {\r\n              return (\r\n                <Fragment key={index}>\r\n                  <span className=\"title\">{people ? \"Person\" : ''}</span>\r\n                  <Searchable setSearchResults={setSearchResults} searchValue={person.displayname} searchTerm=\"person\" setIsLoading={setIsLoading} />\r\n                </Fragment>\r\n              )\r\n            }): null}  \r\n          </Fragment>\r\n          <Fragment>\r\n            <span className=\"title\">{department ? \"Department\" : ''}</span>\r\n            <span className=\"content\">{department ? department : ''}</span>\r\n          </Fragment>\r\n          <Fragment>\r\n            <span className=\"title\">{division ? \"Division\" : ''}</span>\r\n            <span className=\"content\">{division ? division : ''}</span>\r\n          </Fragment>\r\n          <Fragment>\r\n            <span className=\"title\">{contact ? \"Contact\" : ''}</span>\r\n            <span className=\"content\">{contact ? contact : ''}</span>\r\n          </Fragment>\r\n          <Fragment>\r\n            <span className=\"title\">{creditline ? \"Credit Line\" : ''}</span>\r\n            <span className=\"content\">{creditline ? creditline : ''}</span>\r\n          </Fragment>\r\n        </section>\r\n        <section className=\"photos\">\r\n          {/* <img src=IMAGE_URL alt=SOMETHING_WORTHWHILE /> */}\r\n          {images ? images.map((image, index) =>\r\n            <img key={index} src={primaryimageurl} />) : null}\r\n        </section>\r\n      </div>\r\n    </main>\r\n  ) : <main id=\"feature\"></main>;\r\n\r\n  \r\n}\r\n\r\nexport default Feature;\r\n","import React from 'react';\r\n\r\n/**\r\n * Create and export a component called Loading which uses this static HTML template:\r\n * \r\n * <div id=\"loading\">\r\n *   <h2 className=\"message\">Searching...</h2>\r\n * </div>\r\n */\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <div id=\"loading\">\r\n      <h2 className=\"message\">Searching...</h2>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loading;","import React from 'react';\r\n\r\n/**\r\n * We need to import fetchQueryResultsFromURL since we will sometimes have urls in info.prev and info.next\r\n * which are query urls.\r\n */\r\nimport { fetchQueryResultsFromURL } from '../api';\r\n\r\nconst Preview = (props) => {\r\n  /**\r\n   * Destructure setSearchResults, setFeaturedResult, and setIsLoading from props\r\n   * and also destructure info and records from props.searchResults\r\n   * \r\n   * You need info, records, setSearchResults, setFeaturedResult, and setIsLoading as available constants\r\n   */\r\n  const { setSearchResults, setFeaturedResult, setIsLoading } = props;\r\n  const { info, records } = props.searchResults;\r\n  /**\r\n   * Don't touch this function, it's good to go.\r\n   * \r\n   * It has to be defined inside the Preview component to have access to setIsLoading, setSearchResults, etc...\r\n   */\r\n  async function fetchPage(pageUrl) {\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const results = await fetchQueryResultsFromURL(pageUrl);\r\n      setSearchResults(results);\r\n    } catch (error) {\r\n      console.error(error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }\r\n\r\n  return <aside id=\"preview\">\r\n    <header className=\"pagination\">\r\n      {/* This button should be disabled if nothing is set in info.prev, and should call fetchPage with info.prev when clicked */}\r\n      <button \r\n        disabled={!info.prev} \r\n        className=\"previous\"\r\n        onClick={() => {\r\n          fetchPage(info.prev);\r\n        }}>Previous</button>\r\n      {/* This button should be disabled if nothing is set in info.next, and should call fetchPage with info.next when clicked */}\r\n      <button\r\n        disabled={!info.next}\r\n        className=\"next\"\r\n        onClick={() => {\r\n          fetchPage(info.next);\r\n        }}>Next</button>\r\n    </header>\r\n    <section className=\"results\">\r\n      {\r\n        /* Here we should map over the records, and render something like this for each one:\r\n          <div  \r\n            key={ index }\r\n            className=\"object-preview\"\r\n            onClick={(event) => {\r\n              // prevent the default\r\n              // set the featured result to be this record, using setFeaturedResult\r\n            }}>\r\n            { \r\n              // if the record.primaryimageurl exists, show this: <img src={ record.primaryimageurl } alt={ record.description } />, otherwise show nothing \r\n            }\r\n            {\r\n              // if the record.title exists, add this: <h3>{ record.title }</h3>, otherwise show this: <h3>MISSING INFO</h3>\r\n            }\r\n          </div>\r\n        */\r\n        records.map((record, index) => {\r\n          return (\r\n            <div\r\n              key={index}\r\n              className='object-preview'\r\n              onClick={(event) => {\r\n                event.preventDefault();\r\n                setFeaturedResult(record)\r\n              }}>\r\n              {\r\n                record.primaryimageurl ? <img src={record.primaryimageurl} alt={record.description} /> : null\r\n              }\r\n              {\r\n                record.title ? <h3>{record.title}</h3> : <h3>MISSING INFO</h3>\r\n              }\r\n            </div>\r\n          )\r\n        })\r\n      }\r\n    </section>\r\n  </aside>\r\n}\r\n\r\nexport default Preview;","import React, { useEffect, useState } from 'react';\r\n\r\n/**\r\n * Don't touch these imports!\r\n */\r\nimport { \r\n  fetchAllCenturies,\r\n  fetchAllClassifications,\r\n  fetchQueryResults\r\n} from '../api';\r\n\r\nconst Search = (props) => {\r\n  // Make sure to destructure setIsLoading and setSearchResults from the props\r\n\r\n  const { setIsLoading, setSearchResults } = props;\r\n\r\n\r\n  /**\r\n   * We are at the Search component, a child of app. This has a form, so we need to use useState for\r\n   * our controlled inputs:\r\n   * \r\n   * centuryList, setCenturyList (default should be an empty array, [])\r\n   * classificationList, setClassificationList (default should be an empty array, [])\r\n   * queryString, setQueryString (default should be an empty string, '')\r\n   * century, setCentury (default should be the string 'any')\r\n   * classification, setClassification (default should be the string 'any')\r\n   */\r\n\r\n  const [centuryList, setCenturyList] = useState([]);\r\n  const [classificationList, setClassificationList] = useState([]);\r\n  const [queryString, setQueryString] = useState('');\r\n  const [century, setCentury] = useState('any');\r\n  const [classification, setClassification] = useState('any');\r\n\r\n  /**\r\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\r\n   * \r\n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\r\n   * \r\n   * Make sure to console.error on caught errors from the API methods.\r\n   */\r\n  useEffect(() => {\r\n  \r\n      Promise.all([fetchAllCenturies(), fetchAllClassifications()])\r\n        .then(([centuries, classifications]) => {\r\n          setCenturyList(centuries);\r\n          setClassificationList(classifications);\r\n        })\r\n        .catch((error) => {\r\n          console.error(error)\r\n        });\r\n  }, []);\r\n\r\n  /**\r\n   * This is a form element, so we need to bind an onSubmit handler to it which:\r\n   * \r\n   * calls event.preventDefault()\r\n   * calls setIsLoading, set it to true\r\n   * \r\n   * then, in a try/catch/finally block:\r\n   * \r\n   * try to:\r\n   * - get the results from fetchQueryResults({ century, classification, queryString })\r\n   * - pass them to setSearchResults\r\n   * \r\n   * catch: error to console.error\r\n   * \r\n   * finally: call setIsLoading, set it to false\r\n   */\r\n  return <form id=\"search\" onSubmit={async (event) => {\r\n    event.preventDefault();\r\n    setIsLoading(true);\r\n    try {\r\n      fetchQueryResults({ century, classification, queryString })\r\n        .then((results) => {\r\n          setSearchResults(results);\r\n        })\r\n    } catch (err) {\r\n      console.error(err);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }}>\r\n    <fieldset>\r\n      <label htmlFor=\"keywords\">Query</label>\r\n      <input \r\n        id=\"keywords\"\r\n        type=\"text\"\r\n        placeholder=\"enter keywords...\"\r\n        value={queryString}\r\n        onChange={(event) => { setQueryString(event.target.value) }}/>\r\n    </fieldset>\r\n    <fieldset>\r\n      <label htmlFor=\"select-classification\">Classification <span className=\"classification-count\">({ classificationList.length })</span></label>\r\n      <select \r\n        name=\"classification\"\r\n        id=\"select-classification\"\r\n        value={classification} \r\n        onChange={(event) => { setClassification(event.target.value) }}>\r\n        <option value=\"any\">Any</option>\r\n        {/* map over the classificationList, return an <option /> */\r\n          classificationList.map((classification, index) => {\r\n            return <option key={index}>{classification.name}</option>\r\n          })\r\n        }\r\n      </select>\r\n    </fieldset>\r\n    <fieldset>\r\n      <label htmlFor=\"select-century\">Century <span className=\"century-count\">({ centuryList.length })</span></label>\r\n      <select \r\n        name=\"century\" \r\n        id=\"select-century\"\r\n        value={century} \r\n        onChange={(event) => { setCentury(event.target.value) }}>\r\n        <option value=\"any\">Any</option>\r\n        {/* map over the centuryList, return an <option /> */\r\n          centuryList.map((century, index) => {\r\n            return <option key={index}>{century.name}</option>\r\n          })\r\n        }\r\n      </select>\r\n     </fieldset>\r\n    <button>SEARCH</button>\r\n  </form>\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\n\r\n/**\r\n * Create/export a component called Title which uses this static HTML as the template:\r\n * \r\n * <div id=\"title\">\r\n *   <h1>\r\n *     The Art Collector\r\n *   </h1>\r\n *   <h5>\r\n *     Search the Harvard Art Museums' Private Collections\r\n *   </h5>\r\n * </div>\r\n */\r\n\r\nconst Title = () => {\r\n  return (\r\n    <div id=\"title\">\r\n      <h1>\r\n        The Art Collector\r\n      </h1>\r\n      <h5>\r\n        Search the Harvard Art Museums' Private Collections\r\n      </h5>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Title;","import React, { useState } from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n// These imports won't work until you fix ./components/index.js\r\nimport {\r\n  Feature,\r\n  Loading,\r\n  Preview,\r\n  Search,\r\n  Title\r\n} from './components';\r\n\r\nconst App = () => {\r\n  /**\r\n   * We are at the App level component, which is top-most. Any state which needs to be shared between immediate children should\r\n   * be made here, so create state pairs using useState() for:\r\n   * \r\n   * searchResults, setSearchResults (default should be this object:  {info: {}, records: []} )\r\n   * featuredResult, setFeaturedResult (default should be null)\r\n   * isLoading, setIsLoading (default should be false)\r\n   */\r\n  const [ searchResults, setSearchResults ] = useState({ info: {}, records: [] });\r\n  const [ featuredResult, setFeaturedResult ] = useState([null]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  return <div className=\"app\">\r\n    {/* <Title /> is static, doesn't need any props */}\r\n    <Title />\r\n    {/* <Search /> needs props for setIsLoading and setSearchResults (trigger <Loading /> on search start/end, and transfer results to preview) */}\r\n    <Search setIsLoading={setIsLoading} setSearchResults={setSearchResults}/>\r\n    {/* <Preview /> needs props for searchResults, setIsLoading and setSearchResults (clicking prev/next buttons), and setFeaturedResult (clicking a preview) */}\r\n    <Preview searchResults={searchResults} setIsLoading={setIsLoading} setSearchResults={setSearchResults} setFeaturedResult={setFeaturedResult}/>\r\n    {/* <Feature /> needs props for featuredResult, as well as setIsLoading and setSearchResults (clicking on searchable properties) */}\r\n    <Feature featuredResult={featuredResult} setIsLoading={setIsLoading} setSearchResults={setSearchResults}/>\r\n    {/* <Loading /> is static, but should only render when isLoading is true */}\r\n    {\r\n      isLoading ? <Loading/> : null\r\n    } {/* use a ternary and render null if isLoading is false */}\r\n  </div>\r\n}\r\n\r\n/**\r\n * Boostrap the <App /> component into the '#app' element in the DOM,\r\n * using ReactDOM.render();\r\n */\r\n\r\nReactDOM.render(<App />, document.getElementById('app'));"],"sourceRoot":""}